
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры


Функция ВКМ_ЭтоДоговорАбонентскогоОбслуживания(Договор) Экспорт
// {{ Доработка
// Иконникова Е.Ю. 
// Функция проверяет ВидДоговора 
// Если это договор абонентского обслуживания возвращает Истина Иначе - Ложь

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
			АбонентскоеОбслуживание = Истина;
		Иначе
			АбонентскоеОбслуживание = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат АбонентскоеОбслуживание;
	
// Конец доработки }}
КонецФункции

Процедура ВКМ_ВыполнитьАвтозаполнение(Ссылка) Экспорт
// {{ Доработка
// Иконникова Е.Ю. 
// Процедура с помощью служеюных процедур:  
// получает номенклатуру из констант 
// НоменклатураАбонентскаяПлата и НоменклатураРаботыСпециалиста (наличие обязательно)
// очищает табличную часть
// в табличной части указывает 
// - НоменклатураАбонентскаяПлата и сумму абонентской платы из договора (при наличии)
// - НоменклатураРаботыСпециалиста и общее количество и сумму из регистра 
// ВыполненныеКлиентуРаботы за месяц документа. 

	ЗначениеКонстант = ВКМ_ПроверитьЗаполнениеКонстант();
	
	Если Не ЗначениеЗаполнено(ЗначениеКонстант.НоменклатураАбонентскаяПлата) Или
		 Не ЗначениеЗаполнено(ЗначениеКонстант.НоменклатураРаботыСпециалиста) Тогда 	
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
	
	ИнформацияОВыполненныхРаботах = ВКМ_ИнформацияОВыполненныхРаботах();
	
	СоимостьУслугИзДоговора = ВКМ_СоимостьУслугИзДоговора(Договор);
	
	Если ЗначениеЗаполнено(СоимостьУслугИзДоговора) Тогда
		АбонентскаяПлата = 0;
		СуммаЗаРаботы = 0;
		Если ЗначениеЗаполнено(СоимостьУслугИзДоговора.АбонентскаяПлатаИзДоговора) Тогда 	
		    СтрокаСАбонентскойПлатой = Услуги.Добавить();
		   	СтрокаСАбонентскойПлатой.Номенклатура = ЗначениеКонстант.НоменклатураАбонентскаяПлата;
		   	// При условии начисления за полный месяц.
		   	СтрокаСАбонентскойПлатой.Количество = 1;
		   	СтрокаСАбонентскойПлатой.Цена = СоимостьУслугИзДоговора.АбонентскаяПлатаИзДоговора;
		   	СтрокаСАбонентскойПлатой.Сумма = СоимостьУслугИзДоговора.АбонентскаяПлатаИзДоговора;
			АбонентскаяПлата = СоимостьУслугИзДоговора.АбонентскаяПлатаИзДоговора;
		КонецЕсли;
	   	
	   	// при условии, что работы выполнялись
	   	Если СоимостьУслугИзДоговора.СтоимостьЧасаРаботыИзДоговора И  ИнформацияОВыполненныхРаботах <> Неопределено Тогда
		   	СтрокаСВыполненнымиРаботами = Услуги.Добавить();
		   	СтрокаСВыполненнымиРаботами.Номенклатура = ЗначениеКонстант.НоменклатураРаботыСпециалиста;
		   	СтрокаСВыполненнымиРаботами.Количество = ИнформацияОВыполненныхРаботах.КоличествоЧасов;
		   	СтрокаСВыполненнымиРаботами.Цена = СоимостьУслугИзДоговора.СтоимостьЧасаРаботыИзДоговора;
		   	СтрокаСВыполненнымиРаботами.Сумма = ИнформацияОВыполненныхРаботах.СуммаКОплате;
		   	СуммаЗаРаботы = ИнформацияОВыполненныхРаботах.СуммаКОплате;
	   	КонецЕсли;
  	  	
	КонецЕсли;
	
	СуммаДокумента = АбонентскаяПлата + СуммаЗаРаботы;	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Основание = Договор;
	
// Конец доработки }}
КонецПроцедуры

Функция ВКМ_ПроверитьЗаполнениеКонстант() Экспорт
// {{ Доработка
// Иконникова Е.Ю.  
// Функция возвращает структуру констант 
// НоменклатураАбонентскаяПлата и НоменклатураРаботыСпециалиста 

	НоменклатураАбонентскаяПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	
	СтруктураКонстант = Новый Структура;
	
	СтруктураКонстант.Вставить("НоменклатураАбонентскаяПлата", НоменклатураАбонентскаяПлата);
	СтруктураКонстант.Вставить("НоменклатураРаботыСпециалиста", НоменклатураРаботыСпециалиста);
	
	Возврат СтруктураКонстант;
	
// Конец доработки }}	
КонецФункции

Функция ВКМ_СоимостьУслугИзДоговора(Договор) Экспорт
// {{ Доработка
// Иконникова Е.Ю.  
// Функция возвращает сумму абонентской платы и стоимость часа работ из договора 

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты КАК ДоговорСуммаАбонентскойПлаты,
		|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК ДоговорСтоимостьЧасаРаботы
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
		
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		АбонентскаяПлатаИзДоговора = ВыборкаДетальныеЗаписи.ДоговорСуммаАбонентскойПлаты;
		СтоимостьЧасаРаботыИзДоговора = ВыборкаДетальныеЗаписи.ДоговорСтоимостьЧасаРаботы;
		СтруктураСоимостьУслуг = Новый Структура;
		СтруктураСоимостьУслуг.Вставить("АбонентскаяПлатаИзДоговора", АбонентскаяПлатаИзДоговора);
		СтруктураСоимостьУслуг.Вставить("СтоимостьЧасаРаботыИзДоговора", СтоимостьЧасаРаботыИзДоговора);
	КонецЕсли;
	
	Возврат СтруктураСоимостьУслуг;
	
// Конец доработки }}	
КонецФункции

Функция ВКМ_ИнформацияОВыполненныхРаботах() Экспорт
// {{ Доработка
// Иконникова Е.Ю.  
// Функция возвращает информацию 
// об общем количестве и сумме из регистра ВыполненныеКлиентуРаботы за месяц документа 

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовПриход) КАК КоличествоЧасов,
		|	СУММА(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеПриход) КАК СуммаКОплате
		|ИЗ
		|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(&НачалоПерида, &ОкончаниеПериода,,
		|		КлиентКонтрагент = &Контрагент
		|	И Договор = &Договор) КАК ВКМ_ВыполненныеКлиентуРаботыОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачалоПерида", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КоличествоЧасов = ВыборкаДетальныеЗаписи.КоличествоЧасов;
		СуммаКОплате = ВыборкаДетальныеЗаписи.СуммаКОплате;
		СтруктураИтогоКОплате = Новый Структура;
		СтруктураИтогоКОплате.Вставить("КоличествоЧасов", КоличествоЧасов);
		СтруктураИтогоКОплате.Вставить("СуммаКОплате", СуммаКОплате);
	КонецЕсли;
	
	Возврат СтруктураИтогоКОплате;
	
// Конец доработки }}	
КонецФункции


#КонецОбласти

#КонецЕсли
